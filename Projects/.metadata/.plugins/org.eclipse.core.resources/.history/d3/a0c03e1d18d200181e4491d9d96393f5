/**
 * Determine if string is a prefix expression and evaluate it 
 * @author Mikael Hinton
 *
 */
public class PrefixExpressions {
	
	public StringBuffer strExp = new StringBuffer("+ab");
	private int size;
	private int first;
	private int lastChar;
	private int last;
	
	/**
	 * 
	 * @param first
	 * @param last
	 * @return
	 */
	private  int endPrefix(int first, int last)
	{
		// Finds the end of a prefix expression, if one exists
		// Preconditions: The substring of strExp from index first
		//      Through last contains no blank characters
		// Postconditions: Returns the index of the last character
		//		in strExp that begins at index first, if one exists, or
		//		returns -1 if no such prefix expression exists.
//		
//		if(first < 0 || first > last) {
//			return -1;
//		}
//		ch = character at position first of strExp;
//		if(ch is an identifier) {
//			// index of last character in simple prefix expression
//			return first
//		}
//		else if(ch is an operator) {
//			// find the end of the first prefix expression
//			firstEnd = endPrefix(first + 1, last);
//			
//			// if the end of the first expression was found
//			// find the end of the second prefix expression
//			
//			if(firstEnd > -1) {
//				return endPrefix(firstEnd + 1, last);
//			}
//			else {
//				return -1;
//			}
//		}	
//		else
//		{
//			return -1;
//		}
		
		
		if(first < 0 || first > last)
		{
			return -1;
		}
		
		char ch = strExp.charAt(first);
		
		if(ch == "")
		
	}// End of endPrefix
	
	/**
	 * Determine whether the string expression in this class is a prefix expression
	 * @return
	 */
	public boolean isPrefix()
	{
		// Preconditions: The class has a data field  strExp that
		// has been initialized with a string expression that 
		// contains no blank characters.
		// Postconditions: Returns true if the expression is in
		// prefix form, otherwise returns false
		
		size = strExp.length();
		lastChar = endPrefix(0, size - 1);
		
		if(lastChar >= 0 && lastChar == size - 1)
		{
			return true;
		}
		else
		{
			return false;
		}	
	}// End of isPrefix
	
	/**
	 * 
	 * @param strExp
	 * @return
	 */
	public double evaluatePrefix(StringBuffer strExp)
	{
		// Evaluates the prefix expression strExp
		// Preconditions: strExp is a string consisting of a valid
		//		prefix expression containing no blanks
		// Postconditions: Returns the value of the prefix expression
		//
		//
		// ch = first characterof expression strExp
		// Delete first character from strExp
		// if(ch is an identifier) {
		// // base case = single identifier
		// 	return value of the identifier
		// }
		// else if(ch is an operator named op) {
		// 	operand1 = evaluatePrefix(strExp)
		//	operand2 = evaluatePrefix(strExp)
		//	return operand1  op operand2
		// }
		
		
		
		
		
		char ch = strExp.charAt(first);
		strExp.substring(first, last);
		
		
		
		
		
		return 1.00;
	}// End of evaluatePrefix
}//EOF
