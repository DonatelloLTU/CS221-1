/**
 * An implementation that uses the ADT list
 * @author Mikael Hinton
 *
 */
public class StackReferencedBased implements IStack{

	private Node top;	// top of the stack
	
	/**
	 * Constructor that creates a StackReferenceBased list.
	 * 		Initializes top to null.
	 */
	public StackReferencedBased()
	{
		top = null;
	}// End of constructor
	
	/**
	 * Determine whether the stack is empty.
	 * PreCondition: None
	 * PostCondition: Returns true if the stack is empty;
 	 *		otherwise returns false
	 */
	public boolean isEmpty() 
	{
		return top == null;
	}// End of isEmpty
		
	/**
	 * Adds an item to the top of a stack
	 * PreCondition: newItem is the item to be added.
	 * PostCondition: If insertion is successful, newItem
	 * is on the top of the stack.
	 * Exception: Some implementations may throw
	 * StackExcpetion when newItem cannot be places on the stack.
	 */
	public void push(Integer newItem) throws StackException
	{
		try
		{
			top = new Node(newItem, top);
		}
		catch(StackException Se)
		{
			System.out.println("Item cannot be placed on the stack!");
		}
	}// End of push

	/**
	 * Removes the top of a stack.
	 * PreCondition: None
	 * PostCondition: If the stack is not empty, the item
	 *		that was added most recently s removed from the
	 *		stack and returned.
	 * Exception: Throws StackException if the stack is empty.
	 */
	public Integer pop() throws StackException {
		try
		{
		if(!isEmpty())
		{
			Node temp = top;
			top = top.next;
			return temp.item;
		}
		catch(StackException Se)
		{
			
		}
		else
		{
			throw new StackException("StackException on " + "pop: stack empty");
		}// End if
	}// End of pop

	/**
	 * Removes all the items from the stack.
	 * PreCondition: None
	 * PostCondition: Stack is empty.
	 */
	public void popAll() {

		top = null;
	}// End of popAll

	/**
	 * Retrieves the top of a stack.
	 * PreCondition: None
	 * PostCondition: If the stack is not empty, the item that was added most recently is returned.
	 *		The stack is unchanged.
	 * Exception: Throws Stack Exception if the stack is empty
	 */
	public Integer peek() throws StackException {
		
		if(!isEmpty()) 
		{
			return top.item;
		}
		else
		{
			throw new StackException("Stack Exception on " + "peek: stack empty");
		}
	}// End of peek
}// EOF
